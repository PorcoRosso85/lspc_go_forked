// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC38a4abDecodeGithubComJacobdufaultLspc(in *jlexer.Lexer, out *NotificationInitialized) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC38a4abEncodeGithubComJacobdufaultLspc(out *jwriter.Writer, in NotificationInitialized) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NotificationInitialized) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NotificationInitialized) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NotificationInitialized) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NotificationInitialized) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc(l, v)
}
func easyjsonC38a4abDecodeGithubComJacobdufaultLspc1(in *jlexer.Lexer, out *LsVersionedTextDocumentIdentifier) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uri":
			out.URI = LsDocumentURI(in.String())
		case "version":
			if in.IsNull() {
				in.Skip()
				out.Version = nil
			} else {
				if out.Version == nil {
					out.Version = new(int)
				}
				*out.Version = int(in.Int())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC38a4abEncodeGithubComJacobdufaultLspc1(out *jwriter.Writer, in LsVersionedTextDocumentIdentifier) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uri\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URI))
	}
	{
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Version == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Version))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LsVersionedTextDocumentIdentifier) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LsVersionedTextDocumentIdentifier) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LsVersionedTextDocumentIdentifier) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LsVersionedTextDocumentIdentifier) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc1(l, v)
}
func easyjsonC38a4abDecodeGithubComJacobdufaultLspc2(in *jlexer.Lexer, out *LsTextEdit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "range":
			(out.Range).UnmarshalEasyJSON(in)
		case "newText":
			out.NewText = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC38a4abEncodeGithubComJacobdufaultLspc2(out *jwriter.Writer, in LsTextEdit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"range\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Range).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"newText\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NewText))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LsTextEdit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LsTextEdit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LsTextEdit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LsTextEdit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc2(l, v)
}
func easyjsonC38a4abDecodeGithubComJacobdufaultLspc3(in *jlexer.Lexer, out *LsTextDocumentPositionParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "textDocument":
			(out.TextDocument).UnmarshalEasyJSON(in)
		case "position":
			(out.Position).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC38a4abEncodeGithubComJacobdufaultLspc3(out *jwriter.Writer, in LsTextDocumentPositionParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"textDocument\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.TextDocument).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Position).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LsTextDocumentPositionParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LsTextDocumentPositionParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LsTextDocumentPositionParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LsTextDocumentPositionParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc3(l, v)
}
func easyjsonC38a4abDecodeGithubComJacobdufaultLspc4(in *jlexer.Lexer, out *LsTextDocumentItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uri":
			out.URI = LsDocumentURI(in.String())
		case "languageId":
			out.LanguageID = string(in.String())
		case "version":
			out.Version = int(in.Int())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC38a4abEncodeGithubComJacobdufaultLspc4(out *jwriter.Writer, in LsTextDocumentItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uri\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URI))
	}
	{
		const prefix string = ",\"languageId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LanguageID))
	}
	{
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Version))
	}
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LsTextDocumentItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LsTextDocumentItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LsTextDocumentItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LsTextDocumentItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc4(l, v)
}
func easyjsonC38a4abDecodeGithubComJacobdufaultLspc5(in *jlexer.Lexer, out *LsTextDocumentIdentifier) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uri":
			out.URI = LsDocumentURI(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC38a4abEncodeGithubComJacobdufaultLspc5(out *jwriter.Writer, in LsTextDocumentIdentifier) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uri\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URI))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LsTextDocumentIdentifier) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LsTextDocumentIdentifier) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LsTextDocumentIdentifier) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LsTextDocumentIdentifier) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc5(l, v)
}
func easyjsonC38a4abDecodeGithubComJacobdufaultLspc6(in *jlexer.Lexer, out *LsRange) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "start":
			(out.Start).UnmarshalEasyJSON(in)
		case "end":
			(out.End).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC38a4abEncodeGithubComJacobdufaultLspc6(out *jwriter.Writer, in LsRange) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Start).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"end\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.End).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LsRange) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LsRange) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LsRange) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LsRange) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc6(l, v)
}
func easyjsonC38a4abDecodeGithubComJacobdufaultLspc7(in *jlexer.Lexer, out *LsPosition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "line":
			out.Line = int(in.Int())
		case "character":
			out.Character = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC38a4abEncodeGithubComJacobdufaultLspc7(out *jwriter.Writer, in LsPosition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"line\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Line))
	}
	{
		const prefix string = ",\"character\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Character))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LsPosition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LsPosition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LsPosition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LsPosition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc7(l, v)
}
func easyjsonC38a4abDecodeGithubComJacobdufaultLspc8(in *jlexer.Lexer, out *LsLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uri":
			out.URI = LsDocumentURI(in.String())
		case "range":
			(out.Range).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC38a4abEncodeGithubComJacobdufaultLspc8(out *jwriter.Writer, in LsLocation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uri\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URI))
	}
	{
		const prefix string = ",\"range\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Range).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LsLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LsLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LsLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LsLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc8(l, v)
}
func easyjsonC38a4abDecodeGithubComJacobdufaultLspc9(in *jlexer.Lexer, out *LsInitializeParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rootUri":
			out.RootURI = LsDocumentURI(in.String())
		case "initializationOptions":
			(out.InitializationOptions).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC38a4abEncodeGithubComJacobdufaultLspc9(out *jwriter.Writer, in LsInitializeParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rootUri\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RootURI))
	}
	{
		const prefix string = ",\"initializationOptions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.InitializationOptions).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LsInitializeParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LsInitializeParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LsInitializeParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LsInitializeParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc9(l, v)
}
func easyjsonC38a4abDecodeGithubComJacobdufaultLspc10(in *jlexer.Lexer, out *JSONRPCHeader) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "jsonrpc":
			out.JSONRPC = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "id":
			out.ID = RequestID(in.Int())
		case "params":
			(out.Params).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC38a4abEncodeGithubComJacobdufaultLspc10(out *jwriter.Writer, in JSONRPCHeader) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"jsonrpc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JSONRPC))
	}
	{
		const prefix string = ",\"method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Method))
	}
	if (in.ID).IsDefined() {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"params\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Params).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JSONRPCHeader) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JSONRPCHeader) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC38a4abEncodeGithubComJacobdufaultLspc10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JSONRPCHeader) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JSONRPCHeader) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC38a4abDecodeGithubComJacobdufaultLspc10(l, v)
}
